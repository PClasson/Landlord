@page "/customers"
@inject IIndexedDbFactory DbFactory
@inject IMatToaster Toaster

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell-span-4">

        </div>
        <div class="mat-layout-grid-cell-span-8">
                @foreach (var customer in customers)
                {
                    <CustomerCard Customer="@customer"/>
                }

            <MatButton OnClick="@OpenDialog" Raised="true">Add customer</MatButton>
        </div>
    </div>
}

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>Add customer</MatDialogTitle>
    <MatDialogContent>
            <p>
                <MatTextField @bind-Value="@customerName" Label="Name"></MatTextField>
            </p>
            <p>
                <MatTextField @bind-Value="@customerAdress" Label="Adress"></MatTextField>
            </p>
            <p>
                <MatTextField @bind-Value="@customerZipCode" Label="Zip Code"></MatTextField>
            </p>
            <p>
                <MatTextField @bind-Value="@customerCity" Label="City"></MatTextField>
            </p>
            <p>
                <MatTextField @bind-Value="@customerPhone" Label="Phone"></MatTextField>
            </p>           
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@OkClick">Add customer</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    List<Customer> customers;

    //Form binds
    string customerName;
    string customerAdress;
    string customerZipCode;
    string customerCity;
    string customerPhone;
    bool dialogIsOpen = false;

    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.Create<LandlordDb>();
        customers = db.Customers.ToList();
    }

    void OpenDialog()
    {
        customerName = null;
        customerAdress = null;
        customerZipCode = null;
        customerCity = null;
        customerPhone = null;

        dialogIsOpen = true;
    }

    void OkClick()
    {
        AddCustomer();
        dialogIsOpen = false;
    }

    async void AddCustomer()
    {
        var customer = new Customer()
        {
            Name = customerName,
            Adress = customerAdress,
            ZipCode = customerZipCode,
            City = customerCity,
            Phone = customerPhone
        };

        try
        {
            using var db = await DbFactory.Create<LandlordDb>();
            db.Customers.Add(customer);
            await db.SaveChanges();
            customers.Add(customer);
            Toaster.Add("Customer added!", MatToastType.Success);
        }
        catch (Exception ex)
        {
            Toaster.Add("Error adding customer!", MatToastType.Danger, ex.Message);
            Console.WriteLine("Exception caught in AddCustomer");
        }
    }
}
